#include "Hero.hpp"
#include <SFML/Graphics.hpp>
using namespace sf;

Hero::Hero(std::string F, float X, float Y, float W, float H) { //Конструктор с параметрами(формальными) для класса Player. При создании объекта класса мы будем задавать имя файла, координату Х и У, ширину и высоту
	dx = 0; dy = 0; speed = 0; dir = 0;
	File = F;//имя файла+расширение
	w = W; h = H;//высота и ширина
	image.loadFromFile("images/" + File);//запихиваем в image наше изображение вместо File мы передадим то, что пропишем при создании объекта. В нашем случае "hero.png" и получится запись идентичная image.loadFromFile("images/hero/png");
	image.createMaskFromColor(Color(41, 33, 59));//убираем ненужный темно-синий цвет, эта тень мне показалась не красивой.
	texture.loadFromImage(image);//закидываем наше изображение в текстуру
	sprite.setTexture(texture);//заливаем спрайт текстурой
	x = X; y = Y;//координата появления спрайта
	sprite.setTextureRect(IntRect(0, 0, w, h)); //Задаем спрайту один прямоугольник для вывода одного льва, а не кучи львов сразу. IntRect - приведение типов
}

Sprite& Hero::getSprite() { return sprite; }


void Hero::moveLeft(float ftime, float& currentFrame) {
	dir = 1; speed = 0.3;

	currentFrame += 0.005 * ftime; //служит для прохождения по "кадрам". переменная доходит до трех суммируя произведение времени и скорости. изменив 0.005 можно изменить скорость анимации
	if (currentFrame > 3) currentFrame -= 3; // если пришли к третьему кадру - откидываемся назад.
	sprite.setTextureRect(IntRect(96 * int(currentFrame), 96, 96, 96)); //проходимся по координатам Х. получается начинаем рисование с координаты Х равной 0,96,96*2, и опять 0
	//sprite.move(-0.1 * ftime, 0);//происходит само движение персонажа влево


}
void Hero::moveRight(float ftime, float& currentFrame) {
	dir = 0; speed = 0.3;

	currentFrame += 0.005 * ftime; //служит для прохождения по "кадрам". переменная доходит до трех суммируя произведение времени и скорости. изменив 0.005 можно изменить скорость анимации
	if (currentFrame > 3) currentFrame -= 3; //если пришли к третьему кадру - откидываемся назад.
	sprite.setTextureRect(IntRect(96 * int(currentFrame), 192, 96, 96)); //проходимся по координатам Х. получается 0, 96,96*2 и опять 0
	//sprite.move(0.1 * ftime, 0);//происходит само движение персонажа вправо
	
	
	
}
void Hero::moveUp(float ftime, float& currentFrame) {
	dir =3; speed = 0.3;

	currentFrame += 0.005 * ftime; //служит для прохождения по "кадрам". переменная доходит до трех суммируя произведение времени и скорости. изменив 0.005 можно изменить скорость анимации
	if (currentFrame > 3) currentFrame -= 3; // если пришли к третьему кадру - откидываемся назад.
	sprite.setTextureRect(IntRect(96 * int(currentFrame), 288, 96, 96)); //проходимся по координатам Х. получается 0,96,96*2, и опять 0
	//sprite.move(0, -0.1 * ftime);//происходит само движение персонажа вверх
	
	
}

void Hero::moveDown(float ftime, float& currentFrame) {
	dir = 2; speed = 0.3;

	currentFrame += 0.005 * ftime; //служит для прохождения по "кадрам". переменная доходит до трех суммируя произведение времени и скорости. изменив 0.005 можно изменить скорость анимации
	if (currentFrame > 3) currentFrame -= 3; //если пришли к третьему кадру - откидываемся назад.
	sprite.setTextureRect(IntRect(96 * int(currentFrame), 0, 96, 96)); //проходимся по координатам Х. получается 0,96,96*2,и опять 0
	//sprite.move(0, 0.1 * ftime);//происходит само движение персонажа вниз


	
}


void Hero::update(float time) { //функция "оживления" объекта класса. update - обновление. принимает в себя время SFML , вследствие чего работает бесконечно, давая персонажу движение.
	{
		switch (dir)//реализуем поведение в зависимости от направления. (каждая цифра соответствует направлению)
		{
		case 0: dx = speed; dy = 0; break;//по иксу задаем положительную скорость, по игреку зануляем. получаем, что персонаж идет только вправо
		case 1: dx = -speed; dy = 0; break;//по иксу задаем отрицательную скорость, по игреку зануляем. получается, что персонаж идет только влево
		case 2: dx = 0; dy = speed; break;//по иксу задаем нулевое значение, по игреку положительное. получается, что персонаж идет только вниз
		case 3: dx = 0; dy = -speed; break;//по иксу задаем нулевое значение, по игреку отрицательное. получается, что персонаж идет только вверх
		}

		x += dx * time;//то движение из прошлого урока. наше ускорение на время получаем смещение координат и как следствие движение
		y += dy * time;//аналогично по игреку

		speed = 0;//зануляем скорость, чтобы персонаж остановился.
		sprite.setPosition(x, y); //выводим спрайт в позицию x y , посередине. бесконечно выводим в этой функции, иначе бы наш спрайт стоял на месте.
	}
}

